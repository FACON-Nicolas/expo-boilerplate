---
description: 
globs: 
alwaysApply: false
---
# Hooks Development Rules

## Naming Conventions
- All hooks MUST start with `use` prefix
- Use descriptive, camelCase names that clearly indicate the hook's purpose
- Examples: `useAuthentication`, `useThemeColor`, `useToggle`, `useEffectOnce`

## File Structure
- Place all hooks in the [hooks/](mdc:hooks) directory
- Use `.ts` extension for all hook files
- Create platform-specific variants with `.android.ts` or `.ios.ts` when needed

## TypeScript Patterns
- Always use TypeScript with explicit typing
- Import types from [@/types/](mdc:types) directory when available
- Use React's native types (e.g., `EffectCallback`) when appropriate
- For tuple returns, use `as const` assertion (see [useToggle.ts](mdc:hooks/useToggle.ts))
- Type function parameters explicitly, especially for complex objects

## Export Patterns
Choose the appropriate export pattern:
- **Named function export**: `export function useHookName()` for complex hooks
- **Named const export**: `export const useHookName =` for simple utility hooks
- **Re-export**: `export { useHookName } from 'library'` for wrapped external hooks

## Hook Design Patterns

### Simple Utility Hooks
For basic state management, return tuples:
```typescript
export function useToggle(initialValue: boolean) {
  const [value, setValue] = useState<boolean>(initialValue);
  const toggle = () => setValue(!value);
  return [value, toggle] as const;
}
```

### Complex Business Logic Hooks
For hooks with multiple values, return descriptive objects:
```typescript
return {
  isUserAuthenticated: Boolean(user),
  isUserLoading: isLoading,
  error,
  signIn,
  signUp,
};
```

### Error Handling
- Use local state for error management in complex hooks
- Wrap async operations in try/catch blocks
- Reset errors before new operations (see [useAuthentication.ts](mdc:hooks/useAuthentication.ts))

### Hook Composition
- Compose existing hooks rather than duplicating logic
- Import from store or other hooks using `@/` alias
- Example: `const { user, isLoading } = useAuth();`

## Import Conventions
- Use `@/` alias for internal imports
- Group imports: React hooks first, then internal imports, then types
- Example from [useAuthentication.ts](mdc:hooks/useAuthentication.ts):
```typescript
import { useAuth } from '@/store/auth';
import { SignInUser, SignUpUser } from '@/types/user';
import { useState } from 'react';
```

## Platform-Specific Hooks
- Create `.web.ts` variants for web-specific implementations
- Handle hydration issues for SSR compatibility
- Maintain same API across platforms (see [useColorScheme.web.ts](mdc:hooks/useColorScheme.web.ts))

## Documentation
- Add JSDoc comments for complex hooks explaining purpose and usage
- Document platform-specific behavior when applicable
- Include links to relevant documentation when using external patterns

## Performance Considerations
- Use `useEffectOnce` utility for effects that should run only once
- Be explicit about ESLint disables with comments when breaking rules intentionally
- Example: `// eslint-disable-next-line react-hooks/exhaustive-deps`

## Return Value Naming
- Use descriptive names that indicate the value's purpose
- Prefix booleans with `is` or `has` (e.g., `isUserAuthenticated`, `isUserLoading`)
- Use clear action names for functions (e.g., `signIn`, `toggle`)
