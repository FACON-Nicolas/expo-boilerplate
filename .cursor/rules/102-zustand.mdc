---
description: 
globs: 
alwaysApply: false
---
# Zustand State Management

## Store Structure
- Each store should be in a separate file under the `store/` directory
- Store files should be named according to their domain (e.g., `auth.ts`, `profile.ts`)
- Use TypeScript for type safety in store definitions

## Store Definition Pattern
- Define store types at the top of the file
- Use `create` from Zustand to create stores
- Implement selectors as store methods
- Use immer middleware for complex state updates

Example store structure from [store/auth.ts](mdc:store/auth.ts):

```typescript
import { create } from 'zustand'

interface Store {
  state: State
  actions: Actions
}

const useStore = create<Store>((set) => ({
  state: initialState,
  actions: {
    someAction: () => set((state) => ({ ...state, someValue: newValue }))
  }
}))
```

## Usage Guidelines
- Import store hooks directly from store files
- Use selectors to access specific parts of state
- Avoid storing derived state - compute it in selectors
- Keep stores minimal and focused on a single domain

## Best Practices
- Use TypeScript for all store definitions
- Implement proper state hydration for SSR compatibility
- Use shallow equality checks for selectors
- Keep state updates immutable
- Avoid storing redundant or computed data
